---
title: "ML FC features Exploration"
format: html
editor: visual
---

```{r}
library(tidyverse)
library(kableExtra)
library(readr)
```

# Global params

```{r}
imagepath = "plots"
tablepath = "tables"
mltrackeddatapath = "tracked_data"
trackeddatapath = "../src/tracked_data"
fileprefix = "ML_FC_features_Exploration_"
```

```{r}
# update_geom_defaults("text", list(size = 20))
base_size <- 18
theme_set(theme_minimal(base_size = base_size))
theme_pres <- function(base_size){
  theme_get() %+replace%
    theme(axis.ticks = element_line(colour = "grey70", linewidth = rel(0.5)),
          panel.grid = element_blank(),
          panel.grid.major.y = element_line(colour = 'grey90', linewidth = rel(0.5)),
          # panel.border = element_rect(fill = NA, colour = "grey30", linewidth = rel(0.8)),
          strip.text = element_text(size=1.03*base_size),
          legend.text = element_text(size=0.8*base_size))
}
# pres_palette <- c("#482677FF", "#1D7C5A", "#A64902", "#e7298a")
python_palette <- c('cb' = "#0072B2", 'lasso' = "#E69F00", 'ridge' = "#56B4E9", 'linear' = "#D55E00", 'gb' = "#CC79A7", 'rf' = "#009E73")
```

# Functions

```{r}
read_results <- function(variant, set = 'test_fc'){
  df <- read_csv(file.path(mltrackeddatapath,
                           paste0('ML_FC_features_F',
                                  variant,
                                  '_test2021_',
                                  set,
                                  '.csv')),
                 show_col_types = FALSE) |> 
    mutate(variant = variant, .before = everything())
  return(df)
}
```

# Model names for plots

```{r}
model_names_df <- read_results('calc') |> 
  distinct(model, class_name) |> 
  mutate(model_name = str_replace_all(class_name, regex('(?<!^)(([A-Z][a-z]|(?<=[a-z]))[A-Z])'), ' \\1'),
         model_name = str_replace_all(model_name, c('Cat Boost' = 'CatBoost',
                                          'Ridge' = 'Ridge Regression')))
model_names = model_names_df$model_name
names(model_names) = model_names_df$model
model_names
```

# All

```{r}
# variants <- c('cal_fc',
#               'agg_adm_sep1',
#               'calc_agg_adm_sep1',
#               'calc_agg_inst_adm_sep1',
#               'agg_adm_sep2',
#               # 'calc_agg_adm_sep2',
#               'inst_adm_sep1',
#               'ME_W_ref_first',
#               'inst_adm_noW',
#               'inst_adm_sep2',
#               'inst_adm_fund',
#               'add_chars',
#               # 'add_chars_plus',
#               'work',
#               'work_fundamentals',
#               # 'work_add_chars',
#               'preferred'
#               # 'pref_noWork'
#               # 'all'
#               )
variants <- c('calc',
              paste0('djdrank', 2:10))
```

```{r}
results <- lapply(variants, read_results) |> 
  bind_rows() |> 
  mutate(variant = factor(variant, levels=variants, ordered=TRUE)) |> 
  select(-params) |> 
  pivot_longer(c(-variant, -model, -class_name))
results
```

```{r}
eng <- results |> 
  filter(model == 'eng', variant == first(variant)) |> 
  select(-variant)
eng
```

```{r}
results_train <- lapply(variants, \(x) read_results(x, set='fast_train')) |> 
  bind_rows() |> 
  mutate(variant = factor(variant, levels=variants, ordered=TRUE)) |> 
  select(-params) |> 
  pivot_longer(c(-variant, -class_name))
results_train
```

## Best

```{r}
score <- 'r2'

results |> 
  filter(model != 'eng',
         name == score) |> 
  group_by(variant) |> 
  filter(value == max(value)) |> 
  ggplot(aes(x = variant, y = value, fill = model)) +
  geom_col() +
  # scale_fill_manual(values = pres_palette) +
  geom_hline(yintercept = eng |> filter(name == score) |> pull(value),
             linetype = 'dashed') +
  ylim(0, 1) +
  theme_pres(base_size) +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))
```

```{r}
results |> 
  filter(model != 'eng',
         name == score) |> 
  group_by(variant) |> 
  filter(value == max(value)) |> 
  arrange(desc(value))
```

### Train

```{r}
score <- 'r2'

results_train |> 
  filter(name == score) |> 
  group_by(variant) |> 
  filter(value == max(value)) |> 
  ggplot(aes(x = variant, y = value, fill = class_name)) +
  geom_col() +
  # scale_fill_manual(values = pres_palette) +
  # geom_hline(yintercept = eng |> filter(name == score) |> pull(value),
  #            linetype = 'dashed') +
  ylim(0, 1) +
  theme_pres(base_size) +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))
```

```{r}
results_train |> 
  filter(name == score) |> 
  group_by(variant) |> 
  filter(value == max(value)) |> 
  arrange(desc(value))
```

### Other scores

```{r}
score <- 'mae'

results |> 
  filter(model != 'eng',
         name == score) |> 
  group_by(variant) |> 
  filter(value == min(value)) |> 
  ggplot(aes(x = variant, y = value, fill = model)) +
  geom_col() +
  # scale_fill_manual(values = pres_palette) +
  geom_hline(yintercept = eng |> filter(name == score) |> pull(value),
             linetype = 'dashed') +
  # ylim(0, 1) +
  theme_pres(base_size) +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))
```

```{r}
score <- 'mape'

results |> 
  filter(model != 'eng',
         name == score) |> 
  group_by(variant) |> 
  filter(value == min(value)) |> 
  ggplot(aes(x = variant, y = value, fill = model)) +
  geom_col() +
  # scale_fill_manual(values = pres_palette) +
  geom_hline(yintercept = eng |> filter(name == score) |> pull(value),
             linetype = 'dashed') +
  # ylim(0, 1) +
  theme_pres(base_size) +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))
```

## Preferred Variant Best Model

```{r}
best <- results |> 
  filter(name == 'r2') |> 
  filter(value == max(value))

results |> 
  filter(model == best$model) |> 
  ggplot(aes(x = variant, y = value, fill = model)) +
  geom_col() +
  # scale_fill_manual(values = pres_palette) +
  geom_hline(aes(yintercept = value),
             linetype = 'dashed',
             data = eng) +
  facet_wrap(~name, scales = 'free_y') +
  theme_pres(base_size) +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))
```

## Linear

```{r}
results |> 
  filter(model == 'linear') |> 
  ggplot(aes(x = variant, y = value, fill = model)) +
  geom_col() +
  # scale_fill_manual(values = pres_palette) +
  geom_hline(aes(yintercept = value),
             linetype = 'dashed',
             data = eng) +
  facet_wrap(~name, scales = 'free_y') +
  theme_pres(base_size) +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))
```

# Distinct

```{r}
variants_dist <- c('cal_fc',
                   'inst_adm_sep2',
                   # 'ME_W_ref_first',
                   # 'inst_adm_noW',
                   '3',
                   '4',
                   '5',
                   '6',
                   '7',
                   '8',
                   'distance_sum',
                   'add_chars',
                   'work'
                   )
```

```{r}
results_dist <- lapply(variants_dist, read_results) |> 
  bind_rows() |> 
  mutate(variant = factor(variant, levels=variants_dist, ordered=TRUE)) |> 
  select(-params) |> 
  pivot_longer(c(-variant, -model, -class_name))
results_dist
```

## Best

```{r}
score <- 'r2'

results_dist |> 
  filter(model != 'eng',
         name == score) |> 
  group_by(variant) |> 
  filter(value == max(value)) |> 
  ggplot(aes(x = variant, y = value, fill = model)) +
  geom_col() +
  # scale_fill_manual(values = pres_palette) +
  geom_hline(yintercept = eng |> filter(name == score) |> pull(value),
             linetype = 'dashed') +
  ylim(0, 1) +
  theme_pres(base_size) +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))
```

```{r}
results_dist |> 
  filter(model != 'eng',
         name == score) |> 
  group_by(variant) |> 
  filter(value == max(value)) |> 
  ungroup() |> 
  arrange(desc(value)) |> 
  mutate(rank = rank(desc(value)), .after = variant)
```

```{r}
score <- 'mae'

results_dist |> 
  filter(model != 'eng',
         name == score) |> 
  group_by(variant) |> 
  filter(value == min(value)) |> 
  ggplot(aes(x = variant, y = value, fill = model)) +
  geom_col() +
  # scale_fill_manual(values = pres_palette) +
  geom_hline(yintercept = eng |> filter(name == score) |> pull(value),
             linetype = 'dashed') +
  # ylim(0, 1) +
  theme_pres(base_size) +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))
```

```{r}
score <- 'mape'

results_dist |> 
  filter(model != 'eng',
         name == score) |> 
  group_by(variant) |> 
  filter(value == min(value)) |> 
  ggplot(aes(x = variant, y = value, fill = model)) +
  geom_col() +
  # scale_fill_manual(values = pres_palette) +
  geom_hline(yintercept = eng |> filter(name == score) |> pull(value),
             linetype = 'dashed') +
  # ylim(0, 1) +
  theme_pres(base_size) +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))
```

## Preferred Variant Best Model

```{r}
best <- results_dist |> 
  filter(name == 'r2') |> 
  filter(value == max(value))

results_dist |> 
  filter(model == best$model) |> 
  ggplot(aes(x = variant, y = value, fill = model)) +
  geom_col() +
  # scale_fill_manual(values = pres_palette) +
  geom_hline(aes(yintercept = value),
             linetype = 'dashed',
             data = eng) +
  facet_wrap(~name, scales = 'free_y') +
  theme_pres(base_size) +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))
```

## Linear

```{r}
results_dist |> 
  filter(model == 'linear') |> 
  ggplot(aes(x = variant, y = value, fill = model)) +
  geom_col() +
  # scale_fill_manual(values = pres_palette) +
  geom_hline(aes(yintercept = value),
             linetype = 'dashed',
             data = eng) +
  facet_wrap(~name, scales = 'free_y') +
  theme_pres(base_size) +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))
```

# Calc + Distinct

```{r}
order_col <- 'djdrank'
name_col <- 'djdname'

variants_calc <- c('calc',
                   paste0(order_col, 'seppluscal', 2:10)
                   )

names(variants_calc) <- read_csv(file.path(mltrackeddatapath, 'ML_FC_variants.csv'),
                                 show_col_types = FALSE) |> 
  select(variable, {{order_col}}, {{name_col}}) |> 
  rename(cat_names = {{name_col}},
         cat_order = {{order_col}}) |> 
  drop_na(cat_names) |> 
  mutate(cat_names = str_to_sentence(cat_names)) |> 
  mutate(cat_names = str_replace(cat_names,
                                       regex('instantaneous', ignore_case=TRUE),
                                             'inst.')) |> 
  mutate(cat_names = str_replace(cat_names,
                                       regex('characteristics', ignore_case=TRUE),
                                             'chars.')) |> 
  mutate(cat_names = str_replace(cat_names,
                                       regex('fuel consumption', ignore_case=TRUE),
                                       'FC')) |> 
  mutate(cat_names = str_replace(cat_names,
                                       regex('Sfc', ignore_case=TRUE),
                                       'SFC')) |> 
  arrange(cat_order) |> 
  distinct(cat_names) |> 
  pull()

variants_calc
```

```{r}
results_calc <- lapply(variants_calc, read_results) |> 
  bind_rows() |> 
  mutate(variant = factor(variant, levels=variants_calc, ordered=TRUE)) |> 
  select(-params) |> 
  pivot_longer(c(-variant, -model, -class_name)) |> 
  rename(Model = model) |> 
  mutate(variant = factor(variant,
                          levels = variants_calc,
                          labels = names(variants_calc)))
results_calc
```

## Best

```{r}
score <- 'r2'

results_calc |> 
  filter(Model != 'eng',
         name == score) |> 
  group_by(variant) |> 
  filter(value == max(value)) |> 
  ungroup() |> 
  mutate(variant = fct_reorder(variant, desc(value))) |> 
  mutate(variant = fct_relevel(variant, 'Calculated FC')) |> 
  ggplot(aes(x = variant, y = value, fill = Model)) +
  geom_col() +
  scale_fill_manual(values = python_palette,
                    labels = model_names) +
  geom_hline(yintercept = eng |> filter(name == score) |> pull(value),
             linetype = 'dashed') +
  labs(y = expression(R^2),
       x = 'Feature Category (+ Calculated FC)') +
  ylim(0, 1) +
  theme_pres(base_size) +
  theme(axis.text.x = element_text(angle = 55, hjust = 1),
        axis.text=element_text(size=base_size))

ggsave(file.path(imagepath, paste0(fileprefix, 'calc_distinct_r2.png')),
       width = 9, height = 6)
```

```{r}
results_calc |> 
  filter(Model != 'eng',
         name == score) |> 
  filter(variant != 'cal_fc') |> 
  group_by(variant) |> 
  filter(value == max(value)) |> 
  ungroup() |> 
  arrange(desc(value)) |> 
  mutate(rank = rank(desc(value)), .after = variant) |> 
  mutate(rank = rank + 1)
```

```{r}
score <- 'mae'

results_calc |> 
  filter(Model != 'eng',
         name == score) |> 
  group_by(variant) |> 
  filter(value == min(value)) |> 
  ggplot(aes(x = variant, y = value, fill = Model)) +
  geom_col() +
  # scale_fill_manual(values = pres_palette) +
  geom_hline(yintercept = eng |> filter(name == score) |> pull(value),
             linetype = 'dashed') +
  # ylim(0, 1) +
  theme_pres(base_size) +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))
```

```{r}
score <- 'mape'

results_calc |> 
  filter(Model != 'eng',
         name == score) |> 
  group_by(variant) |> 
  filter(value == min(value)) |> 
  ggplot(aes(x = variant, y = value, fill = Model)) +
  geom_col() +
  # scale_fill_manual(values = pres_palette) +
  geom_hline(yintercept = eng |> filter(name == score) |> pull(value),
             linetype = 'dashed') +
  # ylim(0, 1) +
  theme_pres(base_size) +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))
```

## Preferred Variant Best Model

```{r}
best <- results_calc |> 
  filter(name == 'r2') |> 
  filter(value == max(value))

results_calc |> 
  filter(Model == best$Model) |> 
  ggplot(aes(x = variant, y = value, fill = Model)) +
  geom_col() +
  scale_fill_manual(values = python_palette) +
  geom_hline(aes(yintercept = value),
             linetype = 'dashed',
             data = eng |> rename(Model = model)) +
  facet_wrap(~name, scales = 'free_y') +
  theme_pres(base_size) +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))
```

## Linear

```{r}
results_calc |> 
  filter(Model == 'linear') |> 
  ggplot(aes(x = variant, y = value, fill = Model)) +
  geom_col() +
  # scale_fill_manual(values = pres_palette) +
  geom_hline(aes(yintercept = value),
             linetype = 'dashed',
             data = eng) +
  facet_wrap(~name, scales = 'free_y') +
  theme_pres(base_size) +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))
```

# Incremental Test

```{r}
variants_incrTest <- c('cal_fc',
                       'calc_dist',
                       'calc_agg_adm_sep1',
                       'calc_agg_inst_adm_sep1',
                       'preferred')

variants_incrTest
```

```{r}
results_incrTest <- lapply(variants_incrTest, read_results) |> 
  bind_rows() |> 
  mutate(variant = factor(variant, levels=variants_incrTest, ordered=TRUE)) |> 
  select(-params) |> 
  pivot_longer(c(-variant, -model, -class_name))
results_incrTest
```

```{r}
eng <- results_incrTest |> 
  filter(model == 'eng', variant == first(variant)) |> 
  select(-variant)
eng
```

## Best

```{r}
score <- 'r2'

results_incrTest |> 
  filter(model != 'eng',
         name == score) |> 
  group_by(variant) |> 
  filter(value == max(value)) |> 
  ggplot(aes(x = variant, y = value, fill = model)) +
  geom_col() +
  # scale_fill_manual(values = pres_palette) +
  geom_hline(yintercept = eng |> filter(name == score) |> pull(value),
             linetype = 'dashed') +
  ylim(0, 1) +
  theme_pres(base_size) +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))
```

```{r}
score <- 'mae'

results_incrTest |> 
  filter(model != 'eng',
         name == score) |> 
  group_by(variant) |> 
  filter(value == min(value)) |> 
  ggplot(aes(x = variant, y = value, fill = model)) +
  geom_col() +
  # scale_fill_manual(values = pres_palette) +
  geom_hline(yintercept = eng |> filter(name == score) |> pull(value),
             linetype = 'dashed') +
  # ylim(0, 1) +
  theme_pres(base_size) +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))
```

```{r}
score <- 'mape'

results_incrTest |> 
  filter(model != 'eng',
         name == score) |> 
  group_by(variant) |> 
  filter(value == min(value)) |> 
  ggplot(aes(x = variant, y = value, fill = model)) +
  geom_col() +
  # scale_fill_manual(values = pres_palette) +
  geom_hline(yintercept = eng |> filter(name == score) |> pull(value),
             linetype = 'dashed') +
  # ylim(0, 1) +
  theme_pres(base_size) +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))
```

## Preferred Variant Best Model

```{r}
best <- results_incrTest |> 
  filter(name == 'r2') |> 
  filter(value == max(value))

print(paste('Best variant:', best$variant))

results_incrTest |> 
  filter(model == best$model) |> 
  ggplot(aes(x = variant, y = value, fill = model)) +
  geom_col() +
  # scale_fill_manual(values = pres_palette) +
  geom_hline(aes(yintercept = value),
             linetype = 'dashed',
             data = eng) +
  facet_wrap(~name, scales = 'free_y') +
  theme_pres(base_size) +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))
```

CatBoost

```{r}
results_incrTest |> 
  filter(model == 'cb') |> 
  ggplot(aes(x = variant, y = value, fill = model)) +
  geom_col() +
  # scale_fill_manual(values = pres_palette) +
  geom_hline(aes(yintercept = value),
             linetype = 'dashed',
             data = eng) +
  facet_wrap(~name, scales = 'free_y') +
  theme_pres(base_size) +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))
```

# Incremental

```{r}
# variants_incr <- c('cal_fc',
#                    paste0('incr_a', 2:7),
#                    'incr_a9',
#                    'preferred')

# variants_incr <- c('cal_fc',
#                    paste0('incr_a', 2:3),
#                    paste0('incr_b', 4:9),
#                    'preferred')

# variants_incr <- c('cal_fc',
#                    paste0('incr_a', 2:3),
#                    paste0('incr_b', 4:5),
#                    paste0('djbrank_', 6:9)
#                    # paste0('djbrank_', 7:9)
#                    # 'preferred'
#                    )

order_col <- 'djdrank'
name_col <- 'djdname'

variants_incr <- c('calc',
                   paste0(order_col, 2:10)
                   )

names(variants_incr) <- read_csv(file.path(mltrackeddatapath, 'ML_FC_variants.csv'), show_col_types = FALSE) |> 
  select(variable, {{order_col}}, {{name_col}}) |> 
  rename(cat_names = {{name_col}},
         cat_order = {{order_col}}) |> 
  drop_na(cat_names) |> 
  mutate(cat_names = str_to_sentence(cat_names)) |> 
  mutate(cat_names = str_replace(cat_names,
                                       regex('instantaneous', ignore_case=TRUE),
                                             'inst.')) |> 
  mutate(cat_names = str_replace(cat_names,
                                       regex('characteristics', ignore_case=TRUE),
                                             'chars.')) |> 
  mutate(cat_names = str_replace(cat_names,
                                       regex('fuel consumption', ignore_case=TRUE),
                                       'FC')) |> 
  mutate(cat_names = str_replace(cat_names,
                                       regex('Sfc', ignore_case=TRUE),
                                       'SFC')) |> 
  arrange(cat_order) |> 
  distinct(cat_names) |> 
  pull()

variants_incr
```

```{r}
results_incr <- lapply(variants_incr, read_results) |> 
  bind_rows() |> 
  mutate(variant = factor(variant, levels=variants_incr, ordered=TRUE)) |> 
  select(-params) |> 
  mutate(mape = 100*mape) |>  # convert to percent!
  pivot_longer(c(-variant, -model, -class_name)) |> 
  rename(Model = model) |> 
  mutate(variant = factor(variant,
                          levels = variants_incr,
                          labels = names(variants_incr)))
  
results_incr
```

```{r}
eng <- results_incr |> 
  filter(Model == 'eng', variant == first(variant)) |> 
  select(-variant)
eng
```

## Best

```{r}
score <- 'r2'

results_incr |>
  filter(Model != 'eng',
         name == score) |> 
  group_by(variant) |> 
  filter(value == max(value)) |>
  ggplot(aes(x = variant, y = value, fill = Model)) +
  geom_col() +
  scale_fill_manual(values = python_palette,
                    labels = model_names) +
  geom_hline(yintercept = eng |> filter(name == score) |> pull(value),
             linetype = 'dashed') +
  ylim(0, 1) +
  labs(y = expression(R^2),
       x = 'Cumulative Additional Feature Category') +
  theme_pres(base_size) +
  theme(axis.text.x = element_text(angle = 45, hjust = 1),
        axis.text=element_text(size=base_size))
  
ggsave(file.path(imagepath, paste0(fileprefix, 'incremental_r2.png')),
       width = 9, height = 6)
```

```{r}
results_incr |> 
  filter(Model != 'eng',
         name == score) |> 
  group_by(variant) |> 
  filter(value == max(value)) |> 
  ungroup() |>
  mutate(diff = value - lag(value))
```

```{r}
score <- 'r2'

results_incr |>
  filter(Model != 'eng',
         name == score) |> 
  ggplot(aes(x = variant, y = value, fill = Model)) +
  geom_col(position = 'dodge') +
  scale_fill_manual(values = python_palette,
                    labels = model_names) +
  geom_hline(yintercept = eng |> filter(name == score) |> pull(value),
             linetype = 'dashed') +
  ylim(0, 1) +
  labs(y = expression(R^2),
       x = 'Cumulative Additional Feature Category') +
  theme_pres(base_size) +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))
  
ggsave(file.path(imagepath, paste0(fileprefix, 'incremental_r2_allmodels.png')),
       width = 10, height = 7)
```

```{r}
score <- c('mae', 'mape')

results_incr |> 
  filter(Model != 'eng',
         name %in% score) |> 
  group_by(variant, name) |> 
  filter(value == min(value)) |> 
  mutate(name = factor(name,
                       levels = c('mae', 'mape'),
                       labels = c('MAE (t)', 'MAPE (%)'))) |> 
  ggplot(aes(x = variant, y = value, fill = Model)) +
  geom_col() +
  scale_fill_manual(values = python_palette,
                    labels = model_names) +
  geom_hline(aes(yintercept = value),
             linetype = 'dashed',
             data = eng |>
               filter(name %in% score) |>
               mutate(name = factor(name,
                       levels = c('mae', 'mape'),
                       labels = c('MAE (t)', 'MAPE (%)')))) +
  facet_wrap(~name, scales = 'free_y', ncol = 1) +
  labs(y = NULL,
       x = 'Cumulative Additional Feature Category') +
  theme_pres(base_size) +
  theme(axis.text.x = element_text(angle = 50, hjust = 1))

ggsave(file.path(imagepath, paste0(fileprefix, 'incremental_maemape.png')),
       width = 9, height = 7)
```

```{r}
score <- 'mape'

results_incr |> 
  filter(Model != 'eng',
         name == score) |> 
  group_by(variant) |> 
  filter(value == min(value)) |> 
  ggplot(aes(x = variant, y = value, fill = Model)) +
  geom_col() +
  scale_fill_manual(values = python_palette,
                    labels = model_names) +
  geom_hline(yintercept = eng |> filter(name == score) |> pull(value),
             linetype = 'dashed') +
  # ylim(0, 1) +
  theme_pres(base_size) +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))
```

## Preferred Variant Best Model

```{r}
best <- results_incr |> 
  filter(name == 'r2') |> 
  filter(variant == last(variant)) |> 
  filter(value == max(value))

print(paste('Best variant:', best$variant))

results_incr |> 
  filter(Model == best$Model) |> 
  ggplot(aes(x = variant, y = value, fill = Model)) +
  geom_col() +
  scale_fill_manual(values = python_palette,
                    labels = model_names) +
  geom_hline(aes(yintercept = value),
             linetype = 'dashed',
             data = eng) +
  facet_wrap(~name, scales = 'free_y') +
  theme_pres(base_size) +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))
```

CatBoost

```{r}
results_incr |> 
  filter(Model == 'cb') |> 
  filter(name == 'r2') |> 
  ggplot(aes(x = variant, y = value, fill = Model)) +
  geom_col() +
  scale_fill_manual(values = python_palette,
                    labels = model_names) +
  # geom_hline(aes(yintercept = value),
  #            linetype = 'dashed',
  #            data = eng) +
  facet_wrap(~name, scales = 'free_y') +
  theme_pres(base_size) +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))
```

# Incremental Chars

```{r}
variants_inchars <- c('incr_b4',
                   paste0('char', 0:10)
                   )

features_all_desc <- read_csv(
  file.path(tablepath,
            paste0(str_remove(fileprefix, '_features'),
                   'all_feature_names_desc.csv')),
  show_col_types = FALSE)

names(variants_inchars) <- read_csv(file.path(mltrackeddatapath, 'ML_FC_variants.csv'), show_col_types = FALSE) |>
  select(variable, djbrank, disjoint_b_name) |>
  filter(djbrank == 5) |> 
  left_join(features_all_desc, by = 'variable') |> 
  # mutate(disjoint_b_name = str_to_sentence(disjoint_b_name)) |>
  # mutate(disjoint_b_name = str_replace(disjoint_b_name,
  #                                      regex('instantaneous', ignore_case=TRUE),
  #                                            'inst.')) |>
  # mutate(disjoint_b_name = str_replace(disjoint_b_name,
  #                                      regex('characteristics', ignore_case=TRUE),
  #                                            'chars.')) |>
  # mutate(disjoint_b_name = str_replace(disjoint_b_name,
  #                                      regex('fuel consumption', ignore_case=TRUE),
  #                                      'FC')) |>
  # arrange(djbrank) |>
  # distinct(disjoint_b_name) |>
  pull(name) %>%
  c('incr_b4', .)

variants_inchars
```

```{r}
results_inchars <- lapply(variants_inchars, read_results) |> 
  bind_rows() |> 
  mutate(variant = factor(variant, levels=variants_inchars, ordered=TRUE)) |> 
  select(-params) |> 
  mutate(mape = 100*mape) |>  # convert to percent!
  pivot_longer(c(-variant, -model, -class_name)) |> 
  rename(Model = model) |> 
  mutate(variant = factor(variant,
                          levels = variants_inchars,
                          labels = names(variants_inchars)))
  
results_inchars
```

```{r}
eng <- results_inchars |> 
  filter(Model == 'eng', variant == first(variant)) |> 
  select(-variant)
eng
```

## Best

```{r}
library(ggbreak)
score <- 'r2'

results_inchars |>
  filter(variant != 'incr_b4',
         Model != 'eng',
         name == score) |> 
  group_by(variant) |> 
  filter(value == max(value)) |>
  ggplot(aes(x = fct_reorder(variant, desc(value)), y = value, fill = Model)) +
  geom_col() +
  scale_fill_manual(values = python_palette,
                    labels = model_names) +
  # geom_hline(yintercept = eng |> filter(name == score) |> pull(value),
  #            linetype = 'dashed') +
  geom_hline(aes(yintercept = value),
             data = results_inchars |> 
               filter(variant == 'incr_b4',
                      name == score) |> 
               filter(value == max(value)),
             linetype = 'dashed') +
  # scale_y_break(c(0.01, 0.89)) +
  coord_cartesian(ylim = c(0.9, 1)) +
  labs(y = expression(R^2),
       x = 'Additional Ship Characteristic') +
  theme_pres(base_size) +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))
  
ggsave(file.path(imagepath, paste0(fileprefix, 'chars_r2.png')),
       width = 10, height = 7)
```

```{r}
results_inchars |> 
  filter(Model != 'eng',
         name == score) |> 
  group_by(variant) |> 
  filter(value == max(value))
```

```{r}
score <- 'r2'

results_inchars |>
  filter(Model != 'eng',
         name == score) |> 
  ggplot(aes(x = variant, y = value, fill = Model)) +
  geom_col(position = 'dodge') +
  scale_fill_manual(values = python_palette,
                    labels = model_names) +
  geom_hline(yintercept = eng |> filter(name == score) |> pull(value),
             linetype = 'dashed') +
  ylim(0, 1) +
  labs(y = expression(R^2),
       x = 'Additional Ship Characteristic') +
  theme_pres(base_size) +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))
  
ggsave(file.path(imagepath, paste0(fileprefix, 'chars_r2_allmodels.png')),
       width = 10, height = 7)
```

```{r}
score <- c('mae', 'mape')

results_inchars |> 
  filter(Model != 'eng',
         name %in% score) |> 
  group_by(variant, name) |> 
  filter(value == min(value)) |> 
  mutate(name = factor(name,
                       levels = c('mae', 'mape'),
                       labels = c('MAE (t)', 'MAPE (%)'))) |> 
  ggplot(aes(x = variant, y = value, fill = Model)) +
  geom_col() +
  scale_fill_manual(values = python_palette,
                    labels = model_names) +
  geom_hline(aes(yintercept = value),
             linetype = 'dashed',
             data = eng |>
               filter(name %in% score) |>
               mutate(name = factor(name,
                       levels = c('mae', 'mape'),
                       labels = c('MAE (t)', 'MAPE (%)')))) +
  facet_wrap(~name, scales = 'free_y', ncol = 1) +
  labs(y = NULL,
       x = 'Cumulative Additional Feature Category') +
  theme_pres(base_size) +
  theme(axis.text.x = element_text(angle = 50, hjust = 1))

ggsave(file.path(imagepath, paste0(fileprefix, 'chars_maemape.png')),
       width = 10, height = 7)
```

```{r}
score <- 'mape'

results_inchars |> 
  filter(Model != 'eng',
         name == score) |> 
  group_by(variant) |> 
  filter(value == min(value)) |> 
  ggplot(aes(x = variant, y = value, fill = Model)) +
  geom_col() +
  scale_fill_manual(values = python_palette,
                    labels = model_names) +
  geom_hline(yintercept = eng |> filter(name == score) |> pull(value),
             linetype = 'dashed') +
  # ylim(0, 1) +
  theme_pres(base_size) +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))
```

## Preferred Variant Best Model

```{r}
best <- results_inchars |> 
  filter(name == 'r2') |> 
  filter(variant == last(variant)) |> 
  filter(value == max(value))

print(paste('Best variant:', best$variant))

results_inchars |> 
  filter(Model == best$Model) |> 
  ggplot(aes(x = variant, y = value, fill = Model)) +
  geom_col() +
  scale_fill_manual(values = python_palette,
                    labels = model_names) +
  geom_hline(aes(yintercept = value),
             linetype = 'dashed',
             data = eng) +
  facet_wrap(~name, scales = 'free_y') +
  theme_pres(base_size) +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))
```

CatBoost

```{r}
results_inchars |> 
  filter(Model == 'cb') |> 
  filter(name == 'r2') |> 
  ggplot(aes(x = variant, y = value, fill = Model)) +
  geom_col() +
  scale_fill_manual(values = python_palette,
                    labels = model_names) +
  # geom_hline(aes(yintercept = value),
  #            linetype = 'dashed',
  #            data = eng) +
  facet_wrap(~name, scales = 'free_y') +
  theme_pres(base_size) +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))
```
