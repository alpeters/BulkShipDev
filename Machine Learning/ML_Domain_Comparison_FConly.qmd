---
title: "ML Domain Comparison"
format: pdf
editor: visual
---

```{r}
library(tidyverse)
library(kableExtra)
library(readr)
library(plotly)
```

# Global params

```{r include = FALSE}
imagepath = "plots"
tablepath = "tables"
mltrackeddatapath = "tracked_data"
trackeddatapath = "../src/tracked_data"
fileprefix = "ML_Domain_Comparison_"

# update_geom_defaults("text", list(size = 20))
base_size <- 18
theme_set(theme_minimal(base_size = base_size))
theme_pres <- function(base_size){
  theme_get() %+replace%
    theme(axis.ticks = element_line(colour = "grey70", linewidth = rel(0.5)),
          panel.grid = element_blank(),
          panel.grid.major.y = element_line(colour = 'grey90', linewidth = rel(0.5)),
          # panel.border = element_rect(fill = NA, colour = "grey30", linewidth = rel(0.8)),
          strip.text = element_text(size=1.03*base_size),
          legend.text = element_text(size=1.1*base_size))
}
pres_palette <- c("#482677FF", "#1D7C5A", "#A64902", "#e7298a")
```

```{r}
filenames_df <- tribble(
  ~target, ~transform,        ~set, ~split_feature1,                ~splits1, ~split_feature2,         ~splits2,     ~csv_file,   ~csv_file_within,
     # 'fc',         '', 'djdrank10',   'relseaspeed', paste0("quart", c(1,4)),       'draught', c('high', 'low'), 'test_target',     'train_target',
     # 'fe',   'linear', 'djdrank10',   'relseaspeed', paste0("quart", c(1,4)),       'draught', c('high', 'low'),     'test_fc',         'train_fc',
     'fc',         '', 'djdrank10',   'relseaspeed',    paste0("quart", 1:4),              NA,               NA,     'test_fc',     'train_target',
     # 'fe',   'linear', 'djdrank10',   'relseaspeed',    paste0("quart", 1:4),              NA,               NA,     'test_fc',         'train_fc',
     'fc',         '',      'oecd',   'relseaspeed',    paste0("quart", 1:4),              NA,               NA,     'test_fc',     'train_target',
     # 'fe',   'linear',      'oecd',   'relseaspeed',    paste0("quart", 1:4),              NA,               NA,     'test_fc',         'train_fc',
     'fc',         '',  'djdrank4',   'relseaspeed',    paste0("quart", 1:4),              NA,               NA,     'test_fc',     'train_target',
     'fc',         '', 'speeddist',   'relseaspeed',    paste0("quart", 1:4),              NA,               NA,     'test_fc',     'train_target',
     # 'fe',   'linear',  'djdrank4',   'relseaspeed',    paste0("quart", 1:4),              NA,               NA,     'test_fc',         'train_fc',
     # 'fe',   'linear', 'speeddist',   'relseaspeed',    paste0("quart", 1:4),              NA,               NA,     'test_fc',         'train_fc',
)

filenames_df <- filenames_df |> 
  unnest(splits1) |> 
  unnest(splits2) |> 
  # mutate(csv_file = ifelse(target == 'fc', 'test_target', 'test_fc')) |> 
  mutate(filename_base = paste("ML",
                          str_to_upper(target),
                          paste0("F", set),
                          paste0("test", splits1, split_feature1, "test", splits2, split_feature2),
                          transform,
                          # paste0(csv_file, '.csv'),
                          sep = '_') |> 
           str_remove_all('test(?=NA)') |> 
           str_remove_all('NA'),
         split = paste(splits1, splits2, sep = ', ') |> str_remove_all(', NA'),
         filename = paste(filename_base,
                          paste0(csv_file, '.csv'),
                          sep = '_')  |> 
           str_replace_all('__', '_'),
         filename_within = paste(filename_base |> str_replace_all('test', 'train'),
                                 paste0(csv_file_within, '.csv'),
                                 sep = '_') |> 
           str_replace_all('__', '_'))
```

# Generalized

```{r}
metric_table <- tibble()

for(i in 1:nrow(filenames_df)){
      row <- filenames_df[i, ]
      df <- read_csv(file.path(mltrackeddatapath, row$filename),
                     show_col_types = FALSE) |> 
        select(-params) |> 
        pivot_longer(-c(model, class_name), names_to = 'metric') |> 
        bind_cols(row |> select(set, split, target, transform))
      metric_table <- bind_rows(metric_table, df)
}

metric_table <- metric_table |> 
  mutate(set = paste(set, target, sep = '_')) |>
  mutate(set = factor(set,
                      levels = c('speeddist_fe', 'djdrank4_fe', 'work_fe', 'oecd_fe', 'djdrank10_fe',
                                 'speeddist_fc', 'djdrank4_fc', 'work_fc', 'oecd_fc', 'djdrank10_fc'),
                      labels = c('FE Speed & Distance', 'FE Calc Components', 'FE Work', 'FE OECD', 'FE Preferred',
                                 'FC Speed & Distance', 'FC Calc Components', 'FC Work', 'FC OECD', 'FC Preferred'),
                      ordered = TRUE))
```

```{r}
best_stat_function <- function(stat, value){
  if(stat %in% c('mae', 'mape', 'rmse', 'ate')){
    return(min(value))
  }else if(stat %in% c('r2')){
    return(max(value))
  }
}
```

# Functions

```{r}
stat_plot_best <- function(metric_table, stat, ylims = c(NA, NA)){
  
  stat_table <- metric_table |> 
    filter(metric == stat)
  
  if(stat == 'te'){
    stat_table <- stat_table |>
      rename('te' = value) |>
      mutate(value = abs(te))
    stat <- 'ate'
  }
  
  stat_table <- stat_table |>
    group_by(set, split) |> 
    filter(value == best_stat_function(stat, value)) |> 
    ungroup() |> 
    select(set, split, value) 
    # pivot_wider(names_from = split, values_from = value, names_prefix = 'quart') %>%
    # mutate(mean = rowMeans(select(., starts_with('quart'))))
    
  stat_plot <- stat_table |> 
    ggplot(aes(x = split, y = value, fill = set)) +
    geom_col(position = 'dodge') +
    geom_hline(aes(yintercept = mean, color = set),
               linetype = 'dashed',
               data = stat_table |> group_by(set) |> summarise(mean = mean(value))) +
    scale_fill_manual(values = pres_palette) +
    scale_color_manual(values = pres_palette) +
    theme_pres(base_size) +
    labs(y = str_to_upper(stat),
         x = 'Test split',
         fill = 'Feature set',
         color = 'Feature set') +
    coord_cartesian(ylim = ylims) +
    theme(axis.text.x = element_text(angle = 45, hjust = 1))
  # display plot
  return(stat_plot)
}
```

```{r}
stat_plot_model <- function(metric_table, stat, plotmodel, ylims = c(NA, NA)){
  
  stat_table <- metric_table |> 
    filter(metric == stat)
  
  if(stat == 'te'){
    stat_table <- stat_table |>
      rename('te' = value) |>
      mutate(value = abs(te))
    stat <- 'ate'
  }
  
  stat_table <- stat_table |>
    filter(model == plotmodel) |>  
    select(model, set, split, value)
    
  stat_plot <- stat_table |> 
    ggplot(aes(x = split, y = value, fill = set)) +
    geom_col(position = 'dodge') +
    geom_hline(aes(yintercept = mean, color = set),
               linetype = 'dashed',
               data = stat_table |> group_by(set) |> summarise(mean = mean(value))) +
    scale_fill_manual(values = pres_palette) +
    scale_color_manual(values = pres_palette) +
    theme_pres(base_size) +
    labs(y = str_to_upper(stat),
         x = 'Test split',
         fill = 'Feature set',
         color = 'Feature set',
         title = plotmodel) +
    coord_cartesian(ylim = ylims) +
    theme(axis.text.x = element_text(angle = 45, hjust = 1))
  # display plot
  return(stat_plot)
}
```

```{r}
nte_plot_model <- function(metric_table, stat, plotmodel, ylims = c(NA, NA)){
  
  stat_table <- metric_table |> 
    filter(metric == stat)
  
  if(stat == 'te'){
    stat_table <- stat_table |>
      rename('te' = norm.transfer.error) |>
      mutate(norm.transfer.error = abs(te))
    stat <- 'ate'
  }
  
  stat_table <- stat_table |>
    filter(model == plotmodel) |>  
    select(model, set, split, norm.transfer.error)
    
  stat_plot <- stat_table |> 
    ggplot(aes(x = split, y = norm.transfer.error, fill = set)) +
    geom_col(position = 'dodge') +
    geom_hline(aes(yintercept = mean, color = set),
               linetype = 'dashed',
               data = stat_table |> group_by(set) |> summarise(mean = mean(norm.transfer.error))) +
    scale_fill_manual(values = pres_palette) +
    scale_color_manual(values = pres_palette) +
    theme_pres(base_size) +
    labs(y = paste0("NTE (", str_to_upper(stat), ")"),
         x = 'Test split',
         fill = 'Feature set',
         color = 'Feature set',
         title = plotmodel) +
    coord_cartesian(ylim = ylims) +
    theme(axis.text.x = element_text(angle = 45, hjust = 1))
  # display plot
  return(stat_plot)
}
```

# Best model performance by test split

```{r}
stat_plot_best(metric_table, 'mape') |> print()
```

```{r}
stat_plot_best(metric_table, 'mae') |> print()
```

```{r}
stat_plot_best(metric_table, 'r2', ylims = c(0.8, 1)) |> print()
```

```{r}
stat_plot_best(metric_table, 'te') |> print()
```

# Model Performance by test split

## Calculation

```{r}
stat_plot_model(metric_table, 'mape', 'eng') |> print()
```

```{r}
stat_plot_model(metric_table, 'mae', 'eng') |> print()
```

## Gradient Boost

```{r}
stat_plot_model(metric_table, 'mape', 'gb') |> print()
```

## Ridge

```{r}
stat_plot_model(metric_table, 'mape', 'ridge') |> print()
```

## All models

```{r}
stat <- 'mape'

stat_table <- metric_table |> 
  filter(metric == stat) |> 
  filter(model != 'cb')
    
  if(stat == 'te'){
    stat_table <- stat_table |>
      rename('te' = value) |>
      mutate(value = abs(te))
    stat <- 'ate'
  }
  
  pt <- stat_table |> 
    ggplot(aes(x = split, y = value, fill = set)) +
    geom_col(position = 'dodge') +
    geom_hline(aes(yintercept = mean, color = set),
               linetype = 'dashed',
               data = stat_table |> group_by(set, model) |> summarise(mean = mean(value), .groups = 'drop')) +
    scale_fill_manual(values = pres_palette) +
    scale_color_manual(values = pres_palette) +
    theme_pres(base_size) +
    labs(y = str_to_upper(stat),
         x = 'Test split',
         fill = 'Feature set',
         color = 'Feature set') +
    facet_wrap(~model) + 
    theme(axis.text.x = element_text(angle = 45, hjust = 1))
  
# ggplotly(pt)
print(pt)
```

```{r}
stat <- 'mae'

stat_table <- metric_table |> 
    filter(metric == stat)
    
  if(stat == 'te'){
    stat_table <- stat_table |>
      rename('te' = value) |>
      mutate(value = abs(te))
    stat <- 'ate'
  }
  
  stat_table |> 
    ggplot(aes(x = split, y = value, fill = set)) +
    geom_col(position = 'dodge') +
    geom_hline(aes(yintercept = mean, color = set),
               linetype = 'dashed',
               data = stat_table |> group_by(set, model) |> summarise(mean = mean(value), .groups = 'drop')) +
    scale_fill_manual(values = pres_palette) +
    scale_color_manual(values = pres_palette) +
    theme_pres(base_size) +
    labs(y = str_to_upper(stat),
         x = 'Test split',
         fill = 'Feature set',
         color = 'Feature set') +
    facet_wrap(~model) + 
    theme(axis.text.x = element_text(angle = 45, hjust = 1))
```

# Normalized Transfer Error

```{r}
metric_table_within <- tibble()

for(i in 1:nrow(filenames_df)){
      row <- filenames_df[i, ]
      df <- read_csv(file.path(mltrackeddatapath, row$filename_within),
                     show_col_types = FALSE) |> 
        select(-params) |> 
        pivot_longer(-c(model, class_name), names_to = 'metric') |> 
        bind_cols(row |> select(set, split, target, transform))
      metric_table_within <- bind_rows(metric_table_within, df)
}

metric_table_within <- metric_table_within |> 
  mutate(set = paste(set, target, sep = '_')) |>
  mutate(set = factor(set,
                      levels = c('speeddist_fe', 'djdrank4_fe', 'work_fe', 'oecd_fe', 'djdrank10_fe',
                                 'speeddist_fc', 'djdrank4_fc', 'work_fc', 'oecd_fc', 'djdrank10_fc'),
                      labels = c('FE Speed & Distance', 'FE Calc Components', 'FE Work', 'FE OECD', 'FE Preferred',
                                 'FC Speed & Distance', 'FC Calc Components', 'FC Work', 'FC OECD', 'FC Preferred'),
                      ordered = TRUE))
```

```{r}
metric_table <- metric_table |>
  left_join(metric_table_within |> rename(value_within = value)) |> 
  mutate(norm.transfer.error.own = value/value_within) |> 
  group_by(metric, split) |> 
  mutate(test = min(value_within)) |> 
  mutate(norm.transfer.error = value/min(value_within))
```

```{r}
metric_table |> 
  filter(value_within == min(value_within)) |> 
  filter(metric == 'mape')
```

```{r}
metric_table |> 
  filter(metric == 'mae') |> 
  select(model, set, split, target, transform, value_within, norm.transfer.error, norm.transfer.error.own) |> 
  filter(model == 'eng')
```

```{r}
metric_table |> 
  filter(model != 'eng') |>
  filter(norm.transfer.error < 1) |>
  filter(metric != 'r2') |> 
  filter(metric != 'te')
```

## Model Performance by test split

### Gradient Boost

```{r}
nte_plot_model(metric_table, 'mae', 'eng') |> print()
```

## All models

```{r}
stat <- 'mape'

stat_table <- metric_table |> 
  filter(metric == stat) |> 
  filter(model != 'eng')
    
  if(stat == 'te'){
    stat_table <- stat_table |>
      rename('te' = norm.transfer.error) |>
      mutate(norm.transfer.error = abs(te))
    stat <- 'ate'
  }
  
  pt <- stat_table |> 
    ggplot(aes(x = split, y = norm.transfer.error, fill = set)) +
    geom_col(position = 'dodge') +
    geom_hline(aes(yintercept = mean, color = set),
               linetype = 'dashed',
               data = stat_table |> group_by(set, model) |> summarise(mean = mean(norm.transfer.error), .groups = 'drop')) +
    scale_fill_manual(values = pres_palette) +
    scale_color_manual(values = pres_palette) +
    theme_pres(base_size) +
    labs(y = paste0("NTE (", str_to_upper(stat), ")"),
         x = 'Test split',
         fill = 'Feature set',
         color = 'Feature set') +
    facet_wrap(~model) + 
    theme(axis.text.x = element_text(angle = 45, hjust = 1))
  
# ggplotly(pt)
print(pt)
```

```{r}
stat <- 'mae'

stat_table <- metric_table |> 
  filter(metric == stat) |> 
  filter(model != 'cb')
    
  if(stat == 'te'){
    stat_table <- stat_table |>
      rename('te' = norm.transfer.error) |>
      mutate(norm.transfer.error = abs(te))
    stat <- 'ate'
  }
  
  pt <- stat_table |> 
    ggplot(aes(x = split, y = norm.transfer.error, fill = set)) +
    geom_col(position = 'dodge') +
    geom_hline(aes(yintercept = mean, color = set),
               linetype = 'dashed',
               data = stat_table |> group_by(set, model) |> summarise(mean = mean(norm.transfer.error), .groups = 'drop')) +
    scale_fill_manual(values = pres_palette) +
    scale_color_manual(values = pres_palette) +
    theme_pres(base_size) +
    labs(y = paste0("NTE (", str_to_upper(stat), ")"),
         x = 'Test split',
         fill = 'Feature set',
         color = 'Feature set') +
    facet_wrap(~model) + 
    theme(axis.text.x = element_text(angle = 45, hjust = 1))
  
# ggplotly(pt)
print(pt)
```

```{r}
metric_table |> 
  filter(metric == 'mape') |> 
  filter(model == 'eng')
```

# Within domain error (of CV model)

```{r}
stat <- 'mae'

stat_table <- metric_table |> 
  filter(metric == stat) |> 
  filter(model != 'cb')
    
  if(stat == 'te'){
    stat_table <- stat_table |>
      rename('te' = value_within) |>
      mutate(value_within = abs(te))
    stat <- 'ate'
  }
  
  stat_table |> 
    ggplot(aes(x = split, y = value_within, fill = set)) +
    geom_col(position = 'dodge') +
    geom_hline(aes(yintercept = mean, color = set),
               linetype = 'dashed',
               data = stat_table |> group_by(set, model) |> summarise(mean = mean(value_within), .groups = 'drop')) +
    scale_fill_manual(values = pres_palette) +
    scale_color_manual(values = pres_palette) +
    theme_pres(base_size) +
    labs(y = paste0("Within Domain Error (", str_to_upper(stat), ")"),
         x = 'Test split',
         fill = 'Feature set',
         color = 'Feature set') +
    facet_wrap(~model) + 
    theme(axis.text.x = element_text(angle = 45, hjust = 1))
```

# Average performance across feature sets

```{r}
stat <- 'mape'

metric_table |> 
  filter(metric == stat) |> 
  group_by(model, class_name, set, metric) |> 
  summarise(value = mean(value), .groups = 'drop') |> 
  pivot_wider(names_from = set, values_from = value) |>
  select(-metric, -model) |> 
  arrange(class_name)

metric_table |> 
  filter(metric == stat) |> 
  group_by(model, class_name, set, metric) |> 
  summarise(value = sd(value), .groups = 'drop') |> 
  pivot_wider(names_from = set, values_from = value) |>
  select(-metric, -model) |> 
  arrange(class_name)

metric_table |> 
  filter(metric == stat) |> 
  group_by(model, class_name, set, metric) |> 
  summarise(value = sd(value)/mean(value), .groups = 'drop') |> 
  pivot_wider(names_from = set, values_from = value) |>
  select(-metric, -model) |> 
  arrange(class_name)
```
