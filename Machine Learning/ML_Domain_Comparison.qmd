---
title: "ML FC Domain Comparison"
format: html
editor: visual
---

```{r}
library(tidyverse)
# library(kableExtra)
library(readr)
```

# Global params

```{r}
imagepath = "plots"
tablepath = "tables"
mltrackeddatapath = "tracked_data"
trackeddatapath = "../src/tracked_data"
fileprefix = "ML_FE_Domain_Comparison_"

# update_geom_defaults("text", list(size = 20))
base_size <- 18
theme_set(theme_minimal(base_size = base_size))
theme_pres <- function(base_size){
  theme_get() %+replace%
    theme(axis.ticks = element_line(colour = "grey70", linewidth = rel(0.5)),
          panel.grid = element_blank(),
          panel.grid.major.y = element_line(colour = 'grey90', linewidth = rel(0.5)),
          # panel.border = element_rect(fill = NA, colour = "grey30", linewidth = rel(0.8)),
          strip.text = element_text(size=1.03*base_size),
          legend.text = element_text(size=1.1*base_size))
}
pres_palette <- c("#482677FF", "#1D7C5A", "#A64902", "#e7298a")
```


```{r}
target_vars <- c('fc', 'fe')
targets <- c('', 'linear')
names(targets) <- target_vars
split_feature <- 'relseaspeed' #'dwt' #
# sets <- c('djdrank4', 'speeddist')
sets <- c('djdrank10', 'oecd')
# sets <- c('djdrank4', 'speeddist', 'work', 'djdrank10') #, 'oecd')
```

```{r}
filenames_df <- tribble(
  ~target, ~transform, ~set, ~split_feature1, ~splits1, ~split_feature2, ~splits2, ~csv_file,
  'fc', '', 'djdrank10', 'relseaspeed', paste0("quart", c(1,4)), 'draught', c('high', 'low'), 'test_target',
  'fe', 'linear', 'djdrank10', 'relseaspeed', paste0("quart", c(1,4)), 'draught', c('high', 'low'), 'test_fc',
#   'fc', '', 'djdrank10', 'relseaspeed', paste0("quart", 1:4), NA, NA, 'test_fc',
#   'fe', 'linear', 'djdrank10', 'relseaspeed', paste0("quart", 1:4), NA, NA, 'test_fc',
)

filenames_df <- filenames_df |> 
  unnest(splits1) |> 
  unnest(splits2) |> 
  # mutate(csv_file = ifelse(target == 'fc', 'test_target', 'test_fc')) |> 
  mutate(filename = paste("ML",
                          str_to_upper(target),
                          paste0("F", set),
                          paste0("test", splits1, split_feature1, "test", splits2, split_feature2),
                          transform,
                          paste0(csv_file, '.csv'),
                          sep = '_') |> 
           str_remove_all('NA') |> 
           str_replace_all('__', '_'),
         split = paste(splits1, splits2, sep = ', ') |> str_remove_all(', NA'))
```

# Generalized
```{r}
metric_table <- tibble()

for(i in 1:nrow(filenames_df)){
      row <- filenames_df[i, ]
      df <- read_csv(file.path(mltrackeddatapath, row$filename),
                     show_col_types = FALSE) |> 
        select(-params) |> 
        pivot_longer(-c(model, class_name), names_to = 'metric') |> 
        bind_cols(row |> select(set, split, target, transform))
      metric_table <- bind_rows(metric_table, df)
}

metric_table <- metric_table |> 
  mutate(set = paste(set, target, sep = '_')) |>
  mutate(set = factor(set,
                      levels = c('speeddist_fe', 'djdrank4_fe', 'work_fe', 'oecd_fe', 'djdrank10_fe',
                                 'speeddist_fc', 'djdrank4_fc', 'work_fc', 'oecd_fc', 'djdrank10_fc'),
                      labels = c('FE Speed & Distance', 'FE Calc Components', 'FE Work', 'FE OECD', 'FE Preferred',
                                 'FC Speed & Distance', 'FC Calc Components', 'FC Work', 'FC OECD', 'FC Preferred'),
                      ordered = TRUE))
```

```{r}
best_stat_function <- function(stat, value){
  if(stat %in% c('mae', 'mape', 'rmse', 'ate')){
    return(min(value))
  }else if(stat %in% c('r2')){
    return(max(value))
  }
}
```


# Functions
```{r}
stat_plot_best <- function(metric_table, stat, ylims = c(NA, NA)){
  
  stat_table <- metric_table |> 
    filter(metric == stat)
  
  if(stat == 'te'){
    stat_table <- stat_table |>
      rename('te' = value) |>
      mutate(value = abs(te))
    stat <- 'ate'
  }
  
  stat_table <- stat_table |>
    group_by(set, split) |> 
    filter(value == best_stat_function(stat, value)) |> 
    ungroup() |> 
    select(set, split, value) 
    # pivot_wider(names_from = split, values_from = value, names_prefix = 'quart') %>%
    # mutate(mean = rowMeans(select(., starts_with('quart'))))
    
  stat_plot <- stat_table |> 
    ggplot(aes(x = split, y = value, fill = set)) +
    geom_col(position = 'dodge') +
    geom_hline(aes(yintercept = mean, color = set),
               linetype = 'dashed',
               data = stat_table |> group_by(set) |> summarise(mean = mean(value))) +
    scale_fill_manual(values = pres_palette) +
    scale_color_manual(values = pres_palette) +
    theme_pres(base_size) +
    labs(y = str_to_upper(stat),
         x = 'Test split',
         fill = 'Feature set',
         color = 'Feature set') +
    coord_cartesian(ylim = ylims) +
    theme(axis.text.x = element_text(angle = 45, hjust = 1))
  # display plot
  return(stat_plot)
}
```

```{r}
stat_plot_model <- function(metric_table, stat, plotmodel, ylims = c(NA, NA)){
  
  stat_table <- metric_table |> 
    filter(metric == stat)
    
  if(stat == 'te'){
    stat_table <- stat_table |>
      rename('te' = value) |>
      mutate(value = abs(te))
    stat <- 'ate'
  }
  
  stat_table <- stat_table |>
    filter(model == plotmodel) |>  
    select(model, set, split, value)
    
  stat_plot <- stat_table |> 
    ggplot(aes(x = split, y = value, fill = set)) +
    geom_col(position = 'dodge') +
    geom_hline(aes(yintercept = mean, color = set),
               linetype = 'dashed',
               data = stat_table |> group_by(set) |> summarise(mean = mean(value))) +
    scale_fill_manual(values = pres_palette) +
    scale_color_manual(values = pres_palette) +
    theme_pres(base_size) +
    labs(y = str_to_upper(stat),
         x = 'Test split',
         fill = 'Feature set',
         color = 'Feature set',
         title = plotmodel) +
    coord_cartesian(ylim = ylims) +
    theme(axis.text.x = element_text(angle = 45, hjust = 1))
  # display plot
  return(stat_plot)
}
```

# Best model performance by test split

```{r}
stat_plot_best(metric_table, 'mape') |> print()
```

```{r}
stat_plot_best(metric_table, 'mae') |> print()
```

```{r}
stat_plot_best(metric_table, 'r2', ylims = c(0.8, 1)) |> print()
```

```{r}
stat_plot_best(metric_table, 'te') |> print()
```

# Model Performance by test split

## Calculation

```{r}
stat_plot_model(metric_table, 'mape', 'eng') |> print()
```

```{r}
stat_plot_model(metric_table, 'mae', 'eng') |> print()
```

## Gradient Boost

```{r}
stat_plot_model(metric_table, 'mape', 'gb') |> print()
```

## Ridge

```{r}
stat_plot_model(metric_table, 'mape', 'ridge') |> print()
```

## All models

```{r}
stat <- 'mape'

stat_table <- metric_table |> 
    filter(metric == stat)
    
  if(stat == 'te'){
    stat_table <- stat_table |>
      rename('te' = value) |>
      mutate(value = abs(te))
    stat <- 'ate'
  }
  
  stat_table |> 
    ggplot(aes(x = split, y = value, fill = set)) +
    geom_col(position = 'dodge') +
    geom_hline(aes(yintercept = mean, color = set),
               linetype = 'dashed',
               data = stat_table |> group_by(set, model) |> summarise(mean = mean(value), .groups = 'drop')) +
    scale_fill_manual(values = pres_palette) +
    scale_color_manual(values = pres_palette) +
    theme_pres(base_size) +
    labs(y = str_to_upper(stat),
         x = 'Test split',
         fill = 'Feature set',
         color = 'Feature set') +
    facet_wrap(~model)
```

# Average performance across feature sets

```{r}
stat <- 'mape'

metric_table |> 
  filter(metric == stat) |> 
  group_by(model, class_name, set, metric) |> 
  summarise(value = mean(value), .groups = 'drop') |> 
  pivot_wider(names_from = set, values_from = value) |>
  select(-metric, -model) |> 
  arrange(class_name)

metric_table |> 
  filter(metric == stat) |> 
  group_by(model, class_name, set, metric) |> 
  summarise(value = sd(value), .groups = 'drop') |> 
  pivot_wider(names_from = set, values_from = value) |>
  select(-metric, -model) |> 
  arrange(class_name)

metric_table |> 
  filter(metric == stat) |> 
  group_by(model, class_name, set, metric) |> 
  summarise(value = sd(value)/mean(value), .groups = 'drop') |> 
  pivot_wider(names_from = set, values_from = value) |>
  select(-metric, -model) |> 
  arrange(class_name)
```
